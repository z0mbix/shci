#!/usr/bin/env bash
#

[[ "$TRACE" ]] && set -x
set -o pipefail
IFS=$'\n\t'

BUILD_DIR=$PWD
BUILD_FILE='.shci.yml'

while getopts ":d:f:" o; do
  case $o in
    d) BUILD_DIR=$OPTARG ;;
    f) BUILD_FILE=$OPTARG ;;
    :) echo "Option -$OPTARG requires an argument." >&2; exit 1 ;;
    *) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
  esac
done

build_result() {
  type=$1
  status=$2
  cmd=$3

  case $status in
    success)
      declare -a \
        cmds=$(awk '/^failure:/{p=0};p;/^success:/{p=1}' $BUILD_FILE |\
                 sed -E 's/ .*- //g')
      ;;
    failure)
      declare -a \
        cmds=$(awk 'p;/^failure:/{p=1}' $BUILD_FILE |\
                 sed -E 's/ .*- //g')
      ;;
    *) echo "Invalid type: $OPTARG" >&2; exit 1
      ;;
  esac

  echo "${FUNCNAME}: $type ${status}: $cmd"
  for cmd in ${cmds[@]}; do
    eval $cmd
    if [[ $? -ne "0" ]]; then
      build_result $type failure $cmd
      exit 1
    fi
  done
}

build() {
  type=$1
  fail=0

  if [[ -f $BUILD_FILE ]] ; then
    # This is ugly. Should have just used json and jq
    case $type in
      pre)
        declare -a \
          cmds=$(awk '/^build:/{p=0};p;/^pre-build:/{p=1}' $BUILD_FILE |\
                         sed -E 's/ .*- //g')
        ;;
      build)
        declare -a \
          cmds=$(awk '/^post-build:/{p=0};p;/^build:/{p=1}' $BUILD_FILE |\
                         sed -E 's/ .*- //g')
        ;;
      post)
        declare -a \
          cmds=$(awk '/^success:/{p=0};p;/^post-build:/{p=1}' $BUILD_FILE |\
                         sed -E 's/ .*- //g')
        ;;
      *) echo "Invalid type: $OPTARG" >&2; exit 1 ;;
    esac
  else
    echo "Cannot find yaml build file!"
    exit 1
  fi

  echo "Performing $type"
  for cmd in ${cmds[@]}; do
    eval $cmd
    if [[ $? -ne "0" ]]; then
      build_result $type failure $cmd
      exit 1
    fi
  done

}

main() {
  cd $BUILD_DIR

  if [[ -d .git ]]; then
    export GIT_COMMIT=$(git rev-parse HEAD)
    export GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
  fi
  export BUILD_DIR

  declare -a phases=(pre build post)
  for phase in ${phases[@]}; do
    build $phase
    echo
  done

  build_result $type success
}

main

